let x:number = 20;
 if(x<100)
  x+=10;
console.log(x)

let arr:number[] = [1,2]    // Array
let tuple: [string , number] = ['array',10]
tuple.push(20)// bug in typescript as of now

// enum Size{small=1,medium,large} 
const enum Size{small=1,medium,large}   // more optimised code will be generated by the compiler

function calculateTax(income:number, taxYear?: number): number {
  if(income<100000 && (taxYear || 2020)<2022)
    return income
  return income*0.7
}

// let employee: {
//   readonly id: number,
//   name?:string,
//   retire:(date:Date)=> void    //methods 
// }={
//   id:1,
//   name:'Akash',
//   retire: (date:Date)=>{
//     console.log(date)
//   }
// }

// better way of above object implementation
type Employee ={
  readonly id: number,
  name?:string,
  retire:(date:Date)=> void    //methods
 }
let employee: Employee={
  id:1,
  name:'Akash',
  retire: (date:Date)=>{
    console.log(date)
  }
}
employee.retire(new Date("2022-03-25"))

// UNION
// below wight is of union type it can take either number or string
function kgtoLbs(weight: number | string): number {
  // narrowing
  if(typeof weight === 'number'){
    return weight*2.2
  }
  else
    return parseInt(weight)*2.2
}
console.log(kgtoLbs(10))
console.log(kgtoLbs('10kgs'))

// INTERSECTION
type Draggable={
  drag:()=> void
}
type Resizable={
  resize:()=> void
}
// UIWidget is intersection of above types
type UIWidget = Draggable & Resizable

let textBox:UIWidget={
  drag:()=>console.log("dragging"),
  resize:()=>console.log("resizing")
}

// LITERALS
type Quantity = 50|100
let qty:Quantity = 100
// Now qty can only be 50 or 100

// Optional Chaining operator ?.By using the ?. operator instead of just ., 
// JavaScript knows to implicitly check to be sure obj.first is not 
// null or undefined before attempting to access obj.first.second. 
// If obj.first is null or undefined, 
// the expression automatically short-circuits, returning undefined.

// Optional chaining operator: ?. 
// Optional call chaining operator: ?()
// Nullish Coalescing operator: ?? checks both null and undefined

// typescript datatypes:
// any -> avoid using as adds no value as we are using typescript 
// unknown -> instead of "any" type use this with narrowing to add checks on the data
// never
// enum
// tuple